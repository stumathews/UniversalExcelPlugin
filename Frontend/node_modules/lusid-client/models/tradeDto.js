/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Class representing a TradeDto.
 */
class TradeDto {
  /**
   * Create a TradeDto.
   * @member {string} tradeId
   * @member {string} type Possible values include: 'Buy', 'Sell', 'StockIn',
   * 'StockOut'
   * @member {string} securityUid
   * @member {date} tradeDate
   * @member {date} settlementDate
   * @member {number} units
   * @member {number} tradePrice
   * @member {number} totalConsideration
   * @member {string} settlementCurrency This is the ISO three letter code
   * representing the currency
   * @member {array} [properties]
   * @member {string} [counterpartyId]
   * @member {string} source Possible values include: 'System', 'Client'
   * @member {string} [dividendState] Possible values include: 'Default',
   * 'ExDividend', 'CumDividend'
   * @member {string} [tradePriceType] Possible values include: 'Price',
   * 'Yield', 'Spread'
   * @member {string} [unitType] Possible values include: 'Nominal', 'Shares',
   * 'FaceValue', 'Contracts'
   * @member {string} [nettingSet]
   */
  constructor() {
  }

  /**
   * Defines the metadata of TradeDto
   *
   * @returns {object} metadata of TradeDto
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'TradeDto',
      type: {
        name: 'Composite',
        className: 'TradeDto',
        modelProperties: {
          tradeId: {
            required: true,
            serializedName: 'tradeId',
            type: {
              name: 'String'
            }
          },
          type: {
            required: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          securityUid: {
            required: true,
            serializedName: 'securityUid',
            type: {
              name: 'String'
            }
          },
          tradeDate: {
            required: true,
            serializedName: 'tradeDate',
            type: {
              name: 'DateTime'
            }
          },
          settlementDate: {
            required: true,
            serializedName: 'settlementDate',
            type: {
              name: 'DateTime'
            }
          },
          units: {
            required: true,
            serializedName: 'units',
            type: {
              name: 'Number'
            }
          },
          tradePrice: {
            required: true,
            serializedName: 'tradePrice',
            type: {
              name: 'Number'
            }
          },
          totalConsideration: {
            required: true,
            serializedName: 'totalConsideration',
            type: {
              name: 'Number'
            }
          },
          settlementCurrency: {
            required: true,
            serializedName: 'settlementCurrency',
            type: {
              name: 'String'
            }
          },
          properties: {
            required: false,
            serializedName: 'properties',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'PropertyElementType',
                  type: {
                    name: 'Composite',
                    className: 'Property'
                  }
              }
            }
          },
          counterpartyId: {
            required: false,
            serializedName: 'counterpartyId',
            type: {
              name: 'String'
            }
          },
          source: {
            required: true,
            serializedName: 'source',
            type: {
              name: 'String'
            }
          },
          dividendState: {
            required: false,
            serializedName: 'dividendState',
            type: {
              name: 'String'
            }
          },
          tradePriceType: {
            required: false,
            serializedName: 'tradePriceType',
            type: {
              name: 'String'
            }
          },
          unitType: {
            required: false,
            serializedName: 'unitType',
            type: {
              name: 'String'
            }
          },
          nettingSet: {
            required: false,
            serializedName: 'nettingSet',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = TradeDto;
