/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Class representing a GetPropertyDefinitionResponse.
 */
class GetPropertyDefinitionResponse {
  /**
   * Create a GetPropertyDefinitionResponse.
   * @member {object} [error]
   * @member {number} [error.status] The status code that will be returned to
   * the client
   * @member {string} [error.code] The Finbourne specific error-code that
   * encapsulates the specific issue encountered. Possible values include:
   * 'PersonalisationNotFound', 'NonRecursivePersonalisation',
   * 'VersionNotFound', 'TradeNotFound', 'SecurityNotFound',
   * 'PropertyNotFound', 'PortfolioRecursionDepth',
   * 'PortfolioPropertiesNotFound', 'GroupNotFound', 'PortfolioNotFound',
   * 'EntitySchemaNotFound', 'PortfolioNameNotFound', 'PortfolioAlreadyExists',
   * 'OrphanedPortfolio', 'MultiplePropertyDefinitionNotFound',
   * 'InvalidProperty', 'InvalidBasePortfolioAction', 'InsufficientAuthClaims',
   * 'MissingBaseClaims', 'MissingIdentity', 'PropertyNotDefined',
   * 'CannotDeleteSystemProperty', 'CannotModifyImmutablePropertyField',
   * 'PropertyAlreadyExists', 'InvalidPropertyLifeTime',
   * 'RequiredFieldIsMissing', 'CannotModifyDefaultPropertyFormat',
   * 'GroupAlreadyExists', 'NoSuchPropertyDataFormat',
   * 'CannotAddMissingItemToGroup', 'CannotAddAGroupToItself',
   * 'ValidationError', 'LoopDetectedInGroupHierarchy',
   * 'AddingSubGroupCreatedALoop', 'SubGroupAlreadyExists',
   * 'PortfolioAlreadyExistsInGroup', 'MissingClassificationData',
   * 'PriceSourceNotFound', 'AnalyticStoreNotFound', 'InvalidDateFormat',
   * 'AnalyticStoreAlreadyExists', 'ClientSecurityAlreadyExists',
   * 'DuplicateParameterException', 'OneOrMoreFailures', 'OneOrMoreMissing',
   * 'ResultsNotFound', 'OrderFieldNotInResultSet', 'OperationFailedEnum',
   * 'ElasticSearchError', 'InvalidParameterValue', 'Unknown'
   * @member {string} [error.property] The part of the resource which provoked
   * the error (e.g. field)
   * @member {string} [error.message] The non-technical-user friendly message
   * describing the error and how it might be remedied.
   * @member {string} [error.developerMessage] A technical error message that
   * contains the details of the issue and how it might be fixed.
   * @member {string} [error.moreInfo] A link to the endpoint that can provide
   * the dev with more information about that class of error.
   * @member {object} [meta]
   * @member {number} [meta.duration]
   * @member {boolean} [meta.success]
   * @member {string} [meta.requestId]
   * @member {string} [self]
   * @member {string} [schema]
   * @member {string} [domain] Possible values include: 'Trade', 'Portfolio',
   * 'Security', 'Holding', 'ReferenceHolding'
   * @member {string} [key]
   * @member {string} [valueType] Possible values include: 'String', 'Int',
   * 'Decimal', 'DateTime', 'Boolean', 'Map', 'PropertyArray', 'ArrayOfKeys',
   * 'Percentage', 'Currency', 'BenchmarkType', 'InternalId'
   * @member {boolean} [valueRequired]
   * @member {string} [displayName]
   * @member {string} [dataFormatName]
   * @member {string} [dataFormatScope]
   * @member {string} [sort]
   * @member {string} [lifeTime] Possible values include: 'Perpetual',
   * 'TimeVariant'
   */
  constructor() {
  }

  /**
   * Defines the metadata of GetPropertyDefinitionResponse
   *
   * @returns {object} metadata of GetPropertyDefinitionResponse
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'GetPropertyDefinitionResponse',
      type: {
        name: 'Composite',
        className: 'GetPropertyDefinitionResponse',
        modelProperties: {
          error: {
            required: false,
            serializedName: 'error',
            type: {
              name: 'Composite',
              className: 'ErrorMessage'
            }
          },
          meta: {
            required: false,
            serializedName: 'meta',
            type: {
              name: 'Composite',
              className: 'ResponseMeta'
            }
          },
          self: {
            required: false,
            serializedName: 'self',
            type: {
              name: 'String'
            }
          },
          schema: {
            required: false,
            serializedName: 'schema',
            type: {
              name: 'String'
            }
          },
          domain: {
            required: false,
            serializedName: 'domain',
            type: {
              name: 'String'
            }
          },
          key: {
            required: false,
            serializedName: 'key',
            type: {
              name: 'String'
            }
          },
          valueType: {
            required: false,
            serializedName: 'valueType',
            type: {
              name: 'String'
            }
          },
          valueRequired: {
            required: false,
            serializedName: 'valueRequired',
            type: {
              name: 'Boolean'
            }
          },
          displayName: {
            required: false,
            serializedName: 'displayName',
            type: {
              name: 'String'
            }
          },
          dataFormatName: {
            required: false,
            serializedName: 'dataFormatName',
            type: {
              name: 'String'
            }
          },
          dataFormatScope: {
            required: false,
            serializedName: 'dataFormatScope',
            type: {
              name: 'String'
            }
          },
          sort: {
            required: false,
            serializedName: 'sort',
            type: {
              name: 'String'
            }
          },
          lifeTime: {
            required: false,
            serializedName: 'lifeTime',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = GetPropertyDefinitionResponse;
