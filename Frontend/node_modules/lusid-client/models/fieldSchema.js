/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Class representing a FieldSchema.
 */
class FieldSchema {
  /**
   * Create a FieldSchema.
   * @member {string} [scope]
   * @member {string} [name]
   * @member {string} [displayName]
   * @member {string} [type] Possible values include: 'String', 'Int',
   * 'Decimal', 'DateTime', 'Boolean', 'Map', 'PropertyArray', 'ArrayOfKeys',
   * 'Percentage', 'Currency', 'BenchmarkType', 'InternalId'
   * @member {boolean} [isMetric]
   * @member {number} [displayOrder]
   * @member {object} [propertySchema]
   */
  constructor() {
  }

  /**
   * Defines the metadata of FieldSchema
   *
   * @returns {object} metadata of FieldSchema
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'FieldSchema',
      type: {
        name: 'Composite',
        className: 'FieldSchema',
        modelProperties: {
          scope: {
            required: false,
            serializedName: 'scope',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          displayName: {
            required: false,
            serializedName: 'displayName',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          isMetric: {
            required: false,
            serializedName: 'isMetric',
            type: {
              name: 'Boolean'
            }
          },
          displayOrder: {
            required: false,
            serializedName: 'displayOrder',
            type: {
              name: 'Number'
            }
          },
          propertySchema: {
            required: false,
            serializedName: 'propertySchema',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'FieldSchemaElementType',
                  type: {
                    name: 'Composite',
                    className: 'FieldSchema'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = FieldSchema;
